/* 
  Libre Baskerville
  Roboto Slab (light and regular) because regular is basically bold */
@import url("https://fonts.googleapis.com/css2?family=Libre+Baskerville&family=Roboto+Slab:wght@300;400&display=swap");

html {
  font-size: 16px;
  margin: 0;
  overflow-x: hidden;
  overflow-y: hidden;
}
body {
  font-size: 16px;
  margin: 0;
  overflow-x: hidden;
  overflow-y: auto;
  height: 100vh;
}

/* For scrollbar stuff */
* {
  margin: 0;
  padding: 0;
  --thumb-color: #aaa;
  --scroll-bar-color: #0000;
  --scroll-bar-width: 0.8em;
  /* For Firefox */
  scrollbar-width: var(--scroll-bar-width);
  scrollbar-color: var(--thumb-color) var(--scroll-bar-color);
}

*::-webkit-scrollbar {
  background-color: var(--scroll-bar-color);
  width: var(--scroll-bar-width);
}
*::-webkit-scrollbar-track {
  background-color: var(--scroll-bar-color);
}
*::-webkit-scrollbar-thumb {
  background-color: var(--thumb-color);
  box-sizing: border-box;
  border-radius: 0.3em;
  width: 0.8em;
}
*::-webkit-search-cancel-button {
  display: none;
}

body {
  margin: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  --my-header-font: "Libre Baskerville", serif;
  --my-general-font: "Roboto Slab", serif;

  --my-yellow: #ffab40;
  --blue-hue: 227;
  --blue-sat: 57%;
  --blue-lit: 82%;
  --my-sky-blue: hsl(var(--blue-hue), var(--blue-sat), var(--blue-lit));
  --my-dark-blue: #252b42;
  --green-hue: 76;
  --green-sat: 24%;
  --green-lit: 29%;
  --my-green: hsl(var(--green-hue), var(--green-sat), var(--green-lit));
  --my-rust: #a04725;
  font-weight: lighter;
  --bg-hue: 216;
  --bg-sat: 13%;
  --bg-light: 15%;
  --bg-color: hsl(var(--bg-hue), var(--bg-sat), var(--bg-light));
  /* Putting the last f makes the work with transitions that include transparency */
  --default-text: #ffff;
  --opposite-text: #000;
  --light-grey: #ddd;
  --mid-grey: #aaa;
  --low-grey: #777;
  /* To allow for light mode and dark mode, I'm creating this global var
  A lot of elements take the background color and modulate the lightness to create difference
  This allows me to say the modulation is down in light mode (dark cards on light bg)
  and up in dark mode (lighter cards on dark background */
  --cs: 1;
  /* because my background is dark, i want deafult white text */
  --bg-brighter: hsl(
    var(--bg-hue),
    var(--bg-sat),
    calc(var(--bg-light) + calc(10% * var(--cs)))
  );
  --bg-brighter-2: hsl(
    var(--bg-hue),
    var(--bg-sat),
    calc(var(--bg-light) + calc(20% * var(--cs)))
  );
  --bg-brighter-3: hsl(
    var(--bg-hue),
    var(--bg-sat),
    calc(var(--bg-light) + calc(30% * var(--cs)))
  );
  --bg-brighter-4: hsl(
    var(--bg-hue),
    var(--bg-sat),
    calc(var(--bg-light) + calc(40% * var(--cs)))
  );
  --bg-brighter-5: hsl(
    var(--bg-hue),
    var(--bg-sat),
    calc(var(--bg-light) + calc(50% * var(--cs)))
  );
  /* I'm gonna pretty much replace all hex codes with variables. This one isn't necessary, but
  it makes the find and replace easier */
  --transparent: #0000;
  --light-box-color: #0008;
  --error-color: #d55;
  --notify-color: #d00;

  --active-button: hsl(
    var(--blue-hue),
    var(--blue-sat),
    calc(var(--blue-lit) - 5%)
  );

  background-color: var(--bg-color);
  color: var(--default-text);
  font-family: var(--my-general-font);
}

/* body {
  --my-yellow: #291b00;
  --my-sky-blue: #252b42;
  --my-dark-blue: #b7c2eb;

  --green-hue: 76;
  --green-sat: 24%;
  --green-lit: 62%;
  --my-green: hsl(var(--green-hue), var(--green-sat), var(--green-lit));

  --my-rust: #a04725;
  font-weight: lighter;
  --bg-hue: 216;
  --bg-sat: 30%;
  --bg-light: 100%;
  --bg-color: hsl(var(--bg-hue), var(--bg-sat), var(--bg-light));
  --default-text: #000f;
  --opposite-text: #fff;
  --light-grey: #333;
  --mid-grey: #555;
  --low-grey: #888;
  --cs: -1;
} */

/* undoing some of the semantic js css stuff */
button {
  border: none;
  font-family: var(--my-general-font);
  line-height: 1em;
}

a:focus-visible,
button:focus-visible {
  border: 1px solid var(--low-grey);
  outline: 1px solid var(--light-grey);
}

a:focus-visible:active,
button::focus-visible:active {
  border: 1px solid var(--light-grey);
  outline: 1px solid var(--low-grey);
}
.btn-clr {
  color: var(--opposite-text);
  background-color: var(--my-sky-blue);
  font-weight: bolder;
  cursor: pointer;
  border-radius: 0.3em;
}
.btn-clr:active {
  background-color: var(--active-button);
}
.no-wrap {
  white-space: nowrap;
}

::selection {
  background-color: var(--bg-brighter-5) !important;
  color: var(--default-text) !important;
}

:is(h1, h2, h3, h4) {
  font-weight: normal;
  font-family: var(--my-header-font);
  color: var(--my-yellow);
  min-height: 1em;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

/* SMALL MEDIA QUERY */
/* @media only screen and (max-width: 800px) {
    html {
      font-size: 14px;
    }
  }
  
  @media only screen and (max-width: 500px) {
    html {
      font-size: 14px;
    }
  } */
